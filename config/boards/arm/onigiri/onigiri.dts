/**
 * Copyright (c) 2024 Kuba Birecki
 *
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;
#include <nordic/nrf52840_qiaa.dtsi>
#include <rgb_fx.dtsi>

#include <dt-bindings/is31fl3743a_transform.h>
#include <dt-bindings/zmk/matrix_transform.h>

#include <dt-bindings/zmk/rgb_fx.h>

#include "onigiri_animation_zones.h"

/ {
	model = "Onigiri";

	chosen {
		zephyr,code-partition = &code_partition;
		zephyr,sram = &sram0; 
		zephyr,flash = &flash0;
		zephyr,i2c0 = &i2c0;
		zmk,rgb_fx = &root_animation;
		zmk,battery = &vbatt;
		zmk,kscan = &kscan0;
		zmk,matrix_transform = &default_transform;
	};

	vbatt: vbatt {
		compatible = "zmk,battery-voltage-divider";
		io-channels = <&adc 3>;
		output-ohms = <8200000>;
		full-ohms = <(3300000 + 8200000)>;
	};

	kscan0: kscan_0 {
		compatible = "zmk,kscan-gpio-matrix";
		diode-direction = "col2row";
		wakeup-source;

		col-gpios
			= <&gpio0 7 GPIO_ACTIVE_HIGH>
			, <&gpio0 12 GPIO_ACTIVE_HIGH>
			, <&gpio0 4 GPIO_ACTIVE_HIGH>
			, <&gpio0 6 GPIO_ACTIVE_HIGH>
			, <&gpio0 11 GPIO_ACTIVE_HIGH>
			, <&gpio0 8 GPIO_ACTIVE_HIGH>
			, <&gpio0 13 GPIO_ACTIVE_HIGH>
			;

		row-gpios
			= <&gpio0 26 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 16 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 23 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 24 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 22 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 27 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 25 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			;
	};

	default_transform: keymap_transform_0 {
		compatible = "zmk,matrix-transform";
		columns = <7>;
		rows = <9>;

		map = <
			RC(7,0) RC(8,0) RC(7,1) RC(8,1) RC(7,2) RC(8,2) RC(7,3) RC(8,3) RC(7,4) RC(8,4) RC(7,5) RC(8,5) RC(7,6) RC(8,6)
			RC(6,0) RC(5,0) RC(5,6) RC(6,6) RC(5,5) RC(6,5) RC(5,4) RC(6,4) RC(5,3) RC(6,3) RC(5,2) RC(6,2) RC(5,1) RC(6,1)
			RC(3,0) RC(3,1) RC(4,1) RC(3,2) RC(4,2) RC(3,3) RC(4,3) RC(3,4) RC(4,4) RC(3,5) RC(4,5) RC(3,6) RC(4,6)
			RC(1,0) RC(1,6) RC(2,6) RC(1,5) RC(2,5) RC(1,4) RC(2,4) RC(1,3) RC(2,3) RC(1,2) RC(2,2) RC(1,1) RC(2,1)
			RC(0,0) RC(0,6) RC(0,4) RC(0,3) RC(0,2) RC(0,1)
		>;
	};

	rgb-fx {
		compatible = "zmk,rgb-fx";
		drivers = <&led_strip>;
		chain-lengths = <35>;

		key-pixels = <>;

		pixels
			= <&pixel 0 0>
			, <&pixel 7 0>
			, <&pixel 14 0>
			, <&pixel 21 0>
			, <&pixel 28 0>
			, <&pixel 35 0>
			, <&pixel 42 0>
			, <&pixel 49 0>
			, <&pixel 56 0>
			, <&pixel 63 0>
			, <&pixel 70 0>
			, <&pixel 77 0>
			, <&pixel 84 0>
			, <&pixel 91 0>
			, <&pixel 98 0>
			, <&pixel 105 0>
			, <&pixel 112 0>
			, <&pixel 119 0>
			, <&pixel 126 0>
			, <&pixel 133 0>
			, <&pixel 140 0>
			, <&pixel 147 0>
			, <&pixel 154 0>
			, <&pixel 161 0>
			, <&pixel 168 0>
			, <&pixel 175 0>
			, <&pixel 182 0>
			, <&pixel 189 0>
			, <&pixel 196 0>
			, <&pixel 203 0>
			, <&pixel 210 0>
			, <&pixel 217 0>
			, <&pixel 224 0>
			, <&pixel 231 0>
			, <&pixel 238 0>
			;

		root_animation: animation_100 {
			compatible = "zmk,rgb-fx-compose";
			status = "okay";

			fx = <
				&main_animations
				&bt_indicator_1
			>;
		};

		main_animations: animation_0 {
			compatible = "zmk,rgb-fx-control-group";
			status = "okay";

			fx = <
				&blue_sparkle
				&white_sparkle
				&red_sparkle
				&bootloader_all
				&bootloader_status
				&bt_indicators
				&layer_indicator
				&all_indicators
				&blue_solid
				&red_solid
				&white_solid
				&wpm_indicator
				&basic_gradient
				&rgb_static_gradient
				&hsl_static_gradient
				&rgb_gradient
				&wpm_compose
				&rainbow
			>;
		};

		blue_sparkle: animation_1 {
			compatible = "zmk,rgb-fx-sparkle";
			status = "okay";

			pixels = <ZONE_STRIP>;
			duration = <10>;
			colors = <
				HSL(172, 70, 50)
				HSL(189, 70, 50)
			>;
		};

		white_sparkle: animation_2 {
			compatible = "zmk,rgb-fx-sparkle";
			status = "okay";

			pixels = <ZONE_STRIP>;
			duration = <10>;
			colors = <HSL(0, 50, 100)>;
		};

		red_sparkle: animation_3 {
			compatible = "zmk,rgb-fx-sparkle";
			status = "okay";

			pixels = <ZONE_STRIP>;
			duration = <10>;
			colors = <
				HSL(355, 70, 55)
				HSL(10, 70, 55)
			>;
		};

		bootloader_all: animation_4 {
			compatible = "zmk,rgb-fx-compose";
			status = "okay";

			fx = <&bootloader_write &bootloader_status>;
		};

		bootloader_status: animation_5 {
			compatible = "zmk,rgb-fx-solid";
			status = "okay";

			pixels = <ZONE_INDICATOR_L1>;
			colors = <HSL(120, 100, 55)>;
		};

		bootloader_write: animation_6 {
			compatible = "zmk,rgb-fx-solid";
			status = "okay";

			pixels = <ZONE_INDICATOR_L1_BG>;
			colors = <HSL(176, 100, 55)>;
		};

		bt_indicators: animation_7 {
			compatible = "zmk,rgb-fx-solid";
			status = "okay";

			pixels = <ZONE_INDICATOR_L1 ZONE_INDICATOR_L2 ZONE_INDICATOR_L3>;
			colors = <HSL(197, 100, 60)>;
		};

		layer_indicator: animation_8 {
			compatible = "zmk,rgb-fx-solid";
			status = "okay";

			pixels = <ZONE_INDICATOR_R1>;
			colors = <HSL(355, 100, 60)>;
		};

		indicator_bg: animation_9 {
			compatible = "zmk,rgb-fx-solid";
			status = "okay";

			pixels = <ZONE_INDICATOR_L3_BG ZONE_INDICATOR_R1_BG>;
			colors = <HSL(0, 0, 0)>;
		};

		all_indicators: animation_10 {
			compatible = "zmk,rgb-fx-compose";
			status = "okay";

			fx = <
				&white_sparkle
				&indicator_bg
				&bt_indicators
				&layer_indicator
			>;
		};

		blue_solid: animation_11 {
			compatible = "zmk,rgb-fx-solid";
			status = "okay";

			pixels = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24>;
			colors = <HSL(187, 100, 59)>;
		};

		red_solid: animation_12 {
			compatible = "zmk,rgb-fx-solid";
			status = "okay";

			pixels = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24>;
			colors = <HSL(354, 100, 59)>;
		};

		white_solid: animation_13 {
			compatible = "zmk,rgb-fx-solid";
			status = "okay";

			pixels = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24>;
			colors = <HSL(0, 0, 100)>;
		};

		wpm_indicator: animation_14 {
			compatible = "zmk,rgb-fx-wpm";
			status = "okay";

			pixels = <ZONE_STRIP>;
			colors = <HSL(348, 95, 62) HSL(288, 95, 66)>;
			bounds = <0 238>;
			max-wpm = <100>;
			edge-gradient-width = <50>;
		};

		basic_gradient: animation_15 {
			compatible = "zmk,rgb-fx-linear-gradient";
			status = "okay";

			pixels = <ZONE_STRIP>;
			colors = <HSL(0, 100, 50) HSL(120, 100, 50) HSL(240, 100, 50)>;
			gradient-width = <255>;
			duration = <10>;
		};

		rgb_static_gradient: animation_16 {
			compatible = "zmk,rgb-fx-linear-gradient";
			status = "okay";

			pixels = <ZONE_STRIP>;
			colors = <HSL(232, 35, 25) HSL(94, 93, 71)>;
			use-rgb-interpolation;
		};

		hsl_static_gradient: animation_17 {
			compatible = "zmk,rgb-fx-linear-gradient";
			status = "okay";

			pixels = <ZONE_STRIP>;
			colors = <HSL(232, 35, 25) HSL(94, 93, 71)>;
		};

		rgb_gradient: animation_18 {
			compatible = "zmk,rgb-fx-linear-gradient";
			status = "okay";

			pixels = <ZONE_STRIP>;
			colors = <HSL(180, 100, 71) HSL(305, 100, 65)>;
			gradient-width = <150>;
			duration = <10>;
			use-rgb-interpolation;
		};

		bt_indicator_1: animation_19 {
			compatible = "zmk,rgb-fx-bt-indicator";
			status = "okay";

			pixels = <ZONE_INDICATOR_L1>;
			backdrop-pixels = <ZONE_INDICATOR_L1_BG>;

			color = <HSL(209, 100, 49)>;
			// backdrop-color = <HSL(1, 0, 0)>;

			profile-index = <0>;
		};

		wpm_left: animation_20 {
			compatible = "zmk,rgb-fx-wpm";
			status = "okay";

			pixels = <ZONE_STRIP_LEFT ZONE_STRIP_CENTER>;
			colors = <HSL(205, 100, 60) HSL(320, 100, 50)>;
			bounds = <84 0>;
			max-wpm = <100>;
			blending-mode = "multiply";
			edge-gradient-width = <30>;
		};

		wpm_right: animation_21 {
			compatible = "zmk,rgb-fx-wpm";
			status = "okay";

			pixels = <ZONE_STRIP_RIGHT>;
			colors = <HSL(205, 100, 60) HSL(320, 100, 50)>;
			bounds = <154 238>;
			max-wpm = <100>;
			blending-mode = "multiply";
			edge-gradient-width = <30>;
		};

		wpm_compose: animation_22 {
			compatible = "zmk,rgb-fx-compose";
			status = "okay";

			fx = <&white_sparkle &wpm_left &wpm_right>;
		};

		rainbow_border: animation_23 {
			compatible = "zmk,rgb-fx-static";
			status = "okay";

			pixels = <ZONE_RAINBOW_BORDER>;
			colors = <
				HSL(0, 0, 100) HSL(0, 0, 67) HSL(0, 0, 50)
				HSL(0, 0, 50) HSL(0, 0, 67) HSL(0, 0, 100)
			>;
			blending-mode = "multiply";
		};

		rainbow_colors: animation_24 {
			compatible = "zmk,rgb-fx-static";
			status = "okay";

			pixels = <ZONE_RAINBOW>;
			colors = <
				HSL(356, 94, 59) HSL(356, 94, 59)
				HSL(28, 100, 59) HSL(28, 100, 59)
				HSL(53, 100, 64) HSL(53, 100, 64)
				HSL(87, 58, 57) HSL(87, 58, 57)
				HSL(201, 85, 48) HSL(201, 85, 48)
				HSL(275, 63, 51) HSL(275, 63, 51)
			>;
		};

		rainbow_background: animation_25 {
			compatible = "zmk,rgb-fx-linear-gradient";
			status = "okay";

			pixels = <ZONE_STRIP>;
			colors = <HSL(220, 20, 30) HSL(223, 30, 80)>;
			gradient-width = <90>;
			duration = <8>;
		};

		rainbow: animation_26 {
			compatible = "zmk,rgb-fx-compose";
			status = "okay";

			fx = <&rainbow_background &rainbow_border &rainbow_colors>;
		};
	};
};

&adc {
	status = "okay";
};

&gpiote {
	status = "okay";
};

&gpio0 {
	status = "okay";
};

&gpio1 {
	status = "okay";
};

&pinctrl {
	i2c0_default: i2c0_default {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 17)>,
				    <NRF_PSEL(TWIM_SCL, 0, 15)>;
		};
	};

	i2c0_sleep: i2c0_sleep {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 17)>,
				    <NRF_PSEL(TWIM_SCL, 0, 15)>;
			low-power-enable;
		};
	};
};

&i2c0 {
	compatible = "nordic,nrf-twi";
	status = "okay";

	pinctrl-0 = <&i2c0_default>;
	pinctrl-1 = <&i2c0_sleep>;
	pinctrl-names = "default", "sleep";

	clock-frequency = <400000>;

	led_strip: is31fl3743a@20 {
		compatible = "issi,is31fl3743a";
		reg = <0x20>;
		r-ext = <34>;
		sw-setting = <0x02>;
		led-max-current = <10>;
		chain-length = <35>;

		scaling-red = <255>;
		scaling-green = <96>;
		scaling-blue = <84>;

	// Left to right (RGB35 -> RGB1)
		map = <
			RGB(SW(4), CS(16), CS(18), CS(17))
			RGB(SW(8), CS(16), CS(18), CS(17))
			RGB(SW(9), CS(16), CS(18), CS(17))
			RGB(SW(7), CS(16), CS(18), CS(17))
			RGB(SW(5), CS(16), CS(18), CS(17))
			RGB(SW(3), CS(16), CS(18), CS(17))
			RGB(SW(1), CS(16), CS(18), CS(17))
			RGB(SW(2), CS(16), CS(18), CS(17))

			RGB(SW(2), CS(13), CS(15), CS(14))
			RGB(SW(1), CS(13), CS(15), CS(14))
			RGB(SW(3), CS(13), CS(15), CS(14))
			RGB(SW(5), CS(13), CS(15), CS(14))
			RGB(SW(7), CS(13), CS(15), CS(14))
			RGB(SW(9), CS(13), CS(15), CS(14))
			RGB(SW(8), CS(13), CS(15), CS(14))
			RGB(SW(4), CS(13), CS(15), CS(14))
			RGB(SW(6), CS(13), CS(15), CS(14))

			RGB(SW(6), CS(10), CS(12), CS(11))
			RGB(SW(4), CS(10), CS(12), CS(11))
			RGB(SW(8), CS(10), CS(12), CS(11))
			RGB(SW(9), CS(10), CS(12), CS(11))
			RGB(SW(7), CS(10), CS(12), CS(11))
			RGB(SW(5), CS(10), CS(12), CS(11))
			RGB(SW(3), CS(10), CS(12), CS(11))
			RGB(SW(2), CS(10), CS(12), CS(11))
			RGB(SW(1), CS(10), CS(12), CS(11))

			RGB(SW(9), CS(9), CS(8), CS(7))
			RGB(SW(7), CS(9), CS(8), CS(7))
			RGB(SW(5), CS(9), CS(8), CS(7))
			RGB(SW(3), CS(9), CS(8), CS(7))
			RGB(SW(8), CS(9), CS(8), CS(7))
			RGB(SW(6), CS(9), CS(8), CS(7))
			RGB(SW(4), CS(9), CS(8), CS(7))
			RGB(SW(2), CS(9), CS(8), CS(7))
			RGB(SW(1), CS(9), CS(8), CS(7))
		>;
	};
};

zephyr_udc0: &usbd {
	status = "okay";
};

&flash0 {
    /*
     * For more information, see:
     * http://docs.zephyrproject.org/latest/devices/dts/flash_partitions.html
     */
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		sd_partition: partition@0 {
			reg = <0x00000000 0x00001000>;
		};
		code_partition: partition@1000 {
			reg = <0x00001000 0x000d3000>;
		};

		/*
		 * The flash starting at 0x000ec000 and ending at
		 * 0x000f3fff is reserved for use by the application.
		 */

		/*
		 * Storage partition will be used by FCB/LittleFS/NVS
		 * if enabled.
		 */
		storage_partition: partition@d4000 {
			reg = <0x000d4000 0x00020000>;
		};

		boot_partition: partition@f4000 {
			reg = <0x000f4000 0x0000c000>;
		};
	};
};
