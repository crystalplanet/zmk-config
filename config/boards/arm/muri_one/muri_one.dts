/**
 * Copyright (c) 2021 Kuba Birecki
 *
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;
#include <nordic/nrf52840_qiaa.dtsi>
#include <animation.dtsi>

#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/zmk/issi_transform.h>

#include <dt-bindings/zmk/animation.h>
#include <dt-bindings/zmk/animation_compose.h>

#include "muri_one_animation_zones.h"

/ {
	model = "Muri ONE";

	chosen {
		zephyr,code-partition = &code_partition;
		zephyr,sram = &sram0;
		zephyr,flash = &flash0;
		zephyr,i2c0 = &i2c0;
		zmk,kscan = &kscan0;
		zmk,matrix_transform = &default_transform;
		zmk,animation = &root_animation;
	};

	kscan0: kscan_0 {
		compatible = "zmk,kscan-gpio-matrix";
		label = "KSCAN";
		diode-direction = "col2row";

		col-gpios
			= <&gpio0 10 GPIO_ACTIVE_HIGH>
			, <&gpio0 9 GPIO_ACTIVE_HIGH>
			, <&gpio0 22 GPIO_ACTIVE_HIGH>
			, <&gpio0 25 GPIO_ACTIVE_HIGH>
			, <&gpio0 21 GPIO_ACTIVE_HIGH>
			, <&gpio0 19 GPIO_ACTIVE_HIGH>
			, <&gpio0 15 GPIO_ACTIVE_HIGH>
			, <&gpio0 20 GPIO_ACTIVE_HIGH>
			, <&gpio0 23 GPIO_ACTIVE_HIGH>
			;

		row-gpios
			= <&gpio0 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 29 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 24 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 3 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 31 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 30 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 26 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 13 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			;
	};

	default_transform: keymap_transform_0 {
		compatible = "zmk,matrix-transform";
		columns = <9>;
		rows = <11>;

		map = <
			RC(10,1) RC(9,1) RC(10,2) RC(9,2) RC(10,3) RC(9,3) RC(10,4) RC(9,4) RC(10,5) RC(9,5) RC(10,6) RC(9,6) RC(10,7) RC(9,7) RC(10,8) RC(9,8)
			RC(8,0) RC(8,1) RC(7,1) RC(8,2) RC(7,2) RC(8,3) RC(7,3) RC(8,4) RC(7,4) RC(8,5) RC(7,5) RC(8,6) RC(7,6) RC(8,7) RC(7,7) RC(8,8) RC(7,8) RC(6,8)
			RC(6,0) RC(6,1) RC(5,1) RC(6,2) RC(5,2) RC(6,3) RC(5,3) RC(6,4) RC(5,4) RC(6,5) RC(5,5) RC(6,6) RC(5,6) RC(6,7) RC(5,7) RC(5,8) RC(4,8) RC(3,8)
			RC(4,0) RC(4,1) RC(4,2) RC(3,2) RC(4,3) RC(3,3) RC(4,4) RC(3,4) RC(4,5) RC(3,5) RC(4,6) RC(3,6) RC(4,7) RC(3,7)
			RC(2,0) RC(2,1) RC(2,2) RC(1,2) RC(0,3) RC(2,3) RC(1,3) RC(2,4) RC(1,4) RC(2,5) RC(1,5) RC(2,6) RC(2,7) RC(2,8)
			RC(0,0) RC(0,1) RC(1,1) RC(0,2) RC(0,4) RC(0,5) RC(0,6) RC(1,6) RC(1,7) RC(0,7) RC(1,8) RC(0,8)
		>;
	};

	slider: touch_slider_0 {
		compatible = "zmk,touch_slider";
		sensor = <&slider_sensor>;
	};

	animation {
		compatible = "zmk,animation";
		drivers = <&led_matrix>;

		// Pixels in order defined by &led_matrix
		pixels
			= <&pixel 21 68>
			, <&pixel 48 68>
			, <&pixel 61 68>
			, <&pixel 75 68>
			, <&pixel 89 68>
			, <&pixel 109 68>
			, <&pixel 123 68>
			, <&pixel 136 68>
			, <&pixel 150 68>
			, <&pixel 170 68>
			, <&pixel 184 68>
			, <&pixel 197 68>
			, <&pixel 211 68>
			, <&pixel 227 68>
			, <&pixel 241 68>
			, <&pixel 255 68>
			, <&pixel 0 54>
			, <&pixel 21 54>
			, <&pixel 34 54>
			, <&pixel 48 54>
			, <&pixel 61 54>
			, <&pixel 75 54>
			, <&pixel 89 54>
			, <&pixel 102 54>
			, <&pixel 116 54>
			, <&pixel 129 54>
			, <&pixel 143 54>
			, <&pixel 156 54>
			, <&pixel 170 54>
			, <&pixel 184 54>
			, <&pixel 204 54>
			, <&pixel 227 54>
			, <&pixel 241 54>
			, <&pixel 255 54>
			, <&pixel 0 41>
			, <&pixel 24 41>
			, <&pixel 41 41>
			, <&pixel 55 41>
			, <&pixel 68 41>
			, <&pixel 82 41>
			, <&pixel 95 41>
			, <&pixel 109 41>
			, <&pixel 122 41>
			, <&pixel 136 41>
			, <&pixel 149 41>
			, <&pixel 163 41>
			, <&pixel 176 41>
			, <&pixel 190 41>
			, <&pixel 208 41>
			, <&pixel 227 41>
			, <&pixel 241 41>
			, <&pixel 255 41>
			, <&pixel 0 27>
			, <&pixel 26 27>
			, <&pixel 45 27>
			, <&pixel 58 27>
			, <&pixel 72 27>
			, <&pixel 85 27>
			, <&pixel 99 27>
			, <&pixel 112 27>
			, <&pixel 126 27>
			, <&pixel 139 27>
			, <&pixel 153 27>
			, <&pixel 166 27>
			, <&pixel 180 27>
			, <&pixel 202 27>
			, <&pixel 0 14>
			, <&pixel 29 14>
			, <&pixel 51 14>
			, <&pixel 64 14>
			, <&pixel 78 14>
			, <&pixel 91 14>
			, <&pixel 105 14>
			, <&pixel 118 14>
			, <&pixel 132 14>
			, <&pixel 145 14>
			, <&pixel 159 14>
			, <&pixel 172 14>
			, <&pixel 199 14>
			, <&pixel 241 14>
			, <&pixel 0 0>
			, <&pixel 22 0>
			, <&pixel 39 0>
			, <&pixel 56 0>
			, <&pixel 107 0>
			, <&pixel 158 0>
			, <&pixel 175 0>
			, <&pixel 192 0>
			, <&pixel 209 0>
			, <&pixel 227 0>
			, <&pixel 241 0>
			, <&pixel 255 0>
			, <&pixel 0 0>
			, <&pixel 64 0>
			, <&pixel 128 0>
			, <&pixel 192 0>
			, <&pixel 255 0>
			;
	};

	root_animation: animation_0 {
		compatible = "zmk,animation-control";
		status = "okay";

		label = "ANIMATION_CTRL_0";

		animations = <&combine_zones>;
	};

	combine_zones: animation_1 {
		compatible = "zmk,animation-compose";
		status = "okay";

		animations = <
			&animation_keys
			&effect_ctrl
		>;
	};

	effect_ctrl: animation_2 {
		compatible = "zmk,animation-control";
		status = "okay";

		label = "ANIMATION_CTRL_1";

		animations = <&effect_ripple>;
	};

	effect_ripple: animation_3 {
		compatible = "zmk,animation-ripple";
		status = "okay";

		pixels = <ZONE_KEYS>;
		blending-mode = <BLENDING_MODE_SCREEN>;
		duration = <1000>;
		color = <HSL(0, 0, 100)>;
		ripple-width = <50>;
	};

	animation_keys: animation_4 {
		compatible = "zmk,animation-control";
		status = "okay";

		label = "ANIMATION_CTRL_2";

		animations = <
			&base_animation
			&miami_vice
		>;
	};

	miami_vice: animation_5 {
		compatible = "zmk,animation-compose";
		status = "okay";

		animations = <
			&miami_blue
			&miami_purple
		>;
	};

	miami_blue: animation_6 {
		compatible = "zmk,animation-solid";
		status = "okay";

		pixels = <ZONE_NO_MODIFIERS>;
		colors = <HSL(180, 90, 44)>;
	};

	miami_purple: animation_7 {
		compatible = "zmk,animation-solid";
		status = "okay";

		pixels = <ZONE_MODIFIERS>;
		colors = <HSL(310, 88, 77)>;
	};

	base_animation: animation_17 {
		compatible = "zmk,animation-compose";
		status = "okay";

		animations = <
			&background
			&rainbow_ctrl
		>;
	};

	background: animation_8 {
		compatible = "zmk,animation-solid";
		status = "okay";

		pixels = <ZONE_KEYS>;
		colors = <HSL(236, 30, 50)>;
	};

	rainbow_ctrl: animation_9 {
		compatible = "zmk,animation-control";
		status = "okay";

		label = "ANIMATION_CTRL_3";

		animations = <&rainbow>;
	};

	rainbow: animation_10 {
		compatible = "zmk,animation-compose";
		status = "okay";

		animations = <
			&rainbow_red
			&rainbow_orange
			&rainbow_yellow
			&rainbow_green
			&rainbow_blue
			&rainbow_purple
		>;
	};

	rainbow_red: animation_11 {
		compatible = "zmk,animation-solid";
		status = "okay";

		pixels = <ZONE_ACCENT_0>;
		colors = <HSL(356, 94, 59)>;
	};

	rainbow_orange: animation_12 {
		compatible = "zmk,animation-solid";
		status = "okay";

		pixels = <ZONE_ACCENT_1>;
		colors = <HSL(28, 100, 59)>;
	};

	rainbow_yellow: animation_13 {
		compatible = "zmk,animation-solid";
		status = "okay";

		pixels = <ZONE_ACCENT_2>;
		colors = <HSL(53, 100, 64)>;
	};

	rainbow_green: animation_14 {
		compatible = "zmk,animation-solid";
		status = "okay";

		pixels = <ZONE_ACCENT_3>;
		colors = <HSL(87, 58, 57)>;
	};

	rainbow_blue: animation_15 {
		compatible = "zmk,animation-solid";
		status = "okay";

		pixels = <ZONE_ACCENT_4>;
		colors = <HSL(201, 85, 48)>;
	};

	rainbow_purple: animation_16 {
		compatible = "zmk,animation-solid";
		status = "okay";

		pixels = <ZONE_ACCENT_5>;
		colors = <HSL(275, 63, 51)>;
	};
};

&adc {
	status = "okay";
};

&gpiote {
	status = "okay";
};

&gpio0 {
	status = "okay";
};

&gpio1 {
	status = "okay";
};

&i2c0 {
	compatible = "nordic,nrf-twi";
	status = "okay";
	clock-frequency = <400000>;
	sda-pin = <41>;
	scl-pin = <40>;

	slider_sensor: cy8cmbr3106s@37 {
		compatible = "cypress,cy8cmbr3106s";
		label = "CY8CMBR3106S";
		reg = <0x37>;
		trigger-gpios = <&gpio1 3 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
	};

	led_matrix: is31fl3741@30 {
		compatible = "issi,is31fl3741";
		label = "IS31FL3741";
		reg = <0x30>;
		r-ext = <68>;
		led-max-current = <5>;
		sdb-gpios = <&gpio0 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
		chain-length = <97>;

		red-scaling = <255>;
		green-scaling = <96>;
		blue-scaling = <84>;

		map = <
			RGB(SW(7), CS(14), CS(13), CS(15))
			RGB(SW(9), CS(14), CS(13), CS(15))
			RGB(SW(5), CS(14), CS(13), CS(15))
			RGB(SW(4), CS(14), CS(13), CS(15))
			RGB(SW(3), CS(14), CS(13), CS(15))
			RGB(SW(2), CS(14), CS(13), CS(15))
			RGB(SW(1), CS(14), CS(13), CS(15))

			RGB(SW(1), CS(35), CS(34), CS(36))
			RGB(SW(2), CS(35), CS(34), CS(36))
			RGB(SW(3), CS(35), CS(34), CS(36))
			RGB(SW(4), CS(35), CS(34), CS(36))
			RGB(SW(5), CS(35), CS(34), CS(36))
			RGB(SW(9), CS(35), CS(34), CS(36))
			RGB(SW(6), CS(35), CS(34), CS(36))
			RGB(SW(7), CS(35), CS(34), CS(36))
			RGB(SW(8), CS(35), CS(34), CS(36))

			RGB(SW(8), CS(11), CS(12), CS(10))
			RGB(SW(7), CS(11), CS(12), CS(10))
			RGB(SW(6), CS(11), CS(12), CS(10))
			RGB(SW(9), CS(11), CS(12), CS(10))
			RGB(SW(5), CS(11), CS(12), CS(10))
			RGB(SW(4), CS(11), CS(12), CS(10))
			RGB(SW(3), CS(11), CS(12), CS(10))
			RGB(SW(2), CS(11), CS(12), CS(10))
			RGB(SW(1), CS(11), CS(12), CS(10))

			RGB(SW(1), CS(32), CS(33), CS(31))
			RGB(SW(2), CS(32), CS(33), CS(31))
			RGB(SW(3), CS(32), CS(33), CS(31))
			RGB(SW(4), CS(32), CS(33), CS(31))
			RGB(SW(5), CS(32), CS(33), CS(31))
			RGB(SW(9), CS(32), CS(33), CS(31))
			RGB(SW(6), CS(32), CS(33), CS(31))
			RGB(SW(7), CS(32), CS(33), CS(31))
			RGB(SW(8), CS(32), CS(33), CS(31))

			RGB(SW(8), CS(17), CS(16), CS(18))
			RGB(SW(7), CS(17), CS(16), CS(18))
			RGB(SW(6), CS(17), CS(16), CS(18))
			RGB(SW(9), CS(17), CS(16), CS(18))
			RGB(SW(5), CS(17), CS(16), CS(18))
			RGB(SW(4), CS(17), CS(16), CS(18))
			RGB(SW(3), CS(17), CS(16), CS(18))
			RGB(SW(2), CS(17), CS(16), CS(18))
			RGB(SW(1), CS(17), CS(16), CS(18))

			RGB(SW(1), CS(29), CS(30), CS(28))
			RGB(SW(2), CS(29), CS(30), CS(28))
			RGB(SW(3), CS(29), CS(30), CS(28))
			RGB(SW(4), CS(29), CS(30), CS(28))
			RGB(SW(5), CS(29), CS(30), CS(28))
			RGB(SW(9), CS(29), CS(30), CS(28))
			RGB(SW(6), CS(29), CS(30), CS(28))
			RGB(SW(7), CS(29), CS(30), CS(28))
			RGB(SW(8), CS(29), CS(30), CS(28))

			RGB(SW(8), CS(5), CS(6), CS(4))
			RGB(SW(7), CS(5), CS(6), CS(4))
			RGB(SW(9), CS(5), CS(6), CS(4))
			RGB(SW(5), CS(5), CS(6), CS(4))
			RGB(SW(4), CS(5), CS(6), CS(4))
			RGB(SW(3), CS(5), CS(6), CS(4))
			RGB(SW(2), CS(5), CS(6), CS(4))
			RGB(SW(1), CS(5), CS(6), CS(4))

			RGB(SW(1), CS(26), CS(27), CS(25))
			RGB(SW(2), CS(26), CS(27), CS(25))
			RGB(SW(3), CS(26), CS(27), CS(25))
			RGB(SW(4), CS(26), CS(27), CS(25))
			RGB(SW(5), CS(26), CS(27), CS(25))
			RGB(SW(9), CS(26), CS(27), CS(25))

			RGB(SW(8), CS(8), CS(7), CS(9))
			RGB(SW(7), CS(8), CS(7), CS(9))
			RGB(SW(5), CS(8), CS(7), CS(9))
			RGB(SW(4), CS(8), CS(7), CS(9))
			RGB(SW(3), CS(8), CS(7), CS(9))
			RGB(SW(2), CS(8), CS(7), CS(9))
			RGB(SW(1), CS(8), CS(7), CS(9))

			RGB(SW(1), CS(20), CS(19), CS(21))
			RGB(SW(2), CS(20), CS(19), CS(21))
			RGB(SW(3), CS(20), CS(19), CS(21))
			RGB(SW(4), CS(20), CS(19), CS(21))
			RGB(SW(5), CS(20), CS(19), CS(21))
			RGB(SW(9), CS(20), CS(19), CS(21))
			RGB(SW(7), CS(20), CS(19), CS(21))

			RGB(SW(8), CS(2), CS(3), CS(1))
			RGB(SW(7), CS(2), CS(3), CS(1))
			RGB(SW(5), CS(2), CS(3), CS(1))
			RGB(SW(4), CS(2), CS(3), CS(1))
			RGB(SW(2), CS(2), CS(3), CS(1))

			RGB(SW(3), CS(38), CS(37), CS(39))
			RGB(SW(4), CS(38), CS(37), CS(39))
			RGB(SW(5), CS(38), CS(37), CS(39))
			RGB(SW(9), CS(38), CS(37), CS(39))
			RGB(SW(6), CS(38), CS(37), CS(39))
			RGB(SW(7), CS(38), CS(37), CS(39))
			RGB(SW(8), CS(38), CS(37), CS(39))

			RGB(SW(6), CS(26), CS(27), CS(25))
			RGB(SW(6), CS(20), CS(19), CS(21))
			RGB(SW(7), CS(26), CS(27), CS(25))
			RGB(SW(8), CS(20), CS(19), CS(21))
			RGB(SW(8), CS(26), CS(27), CS(25))
		>;
	};
};

&usbd {
	compatible = "nordic,nrf-usbd";
	status = "okay";
};

&flash0 {
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		sd_partition: partition@0 {
			label = "softdevice";
			reg = <0x00000000 0x00026000>;
		};
		code_partition: partition@26000 {
			label = "code_partition";
			reg = <0x00026000 0x000c6000>;
		};

		/*
		 * The flash starting at 0x000ec000 and ending at
		 * 0x000f3fff is reserved for use by the application.
		 */

		/*
		 * Storage partition will be used by FCB/LittleFS/NVS
		 * if enabled.
		 */
		storage_partition: partition@ec000 {
			label = "storage";
			reg = <0x000ec000 0x00008000>;
		};

		boot_partition: partition@f4000 {
			label = "adafruit_boot";
			reg = <0x000f4000 0x0000c000>;
		};
	};
};
